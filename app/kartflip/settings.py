"""
Django settings for kartflip project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Core python imports
from pathlib import Path

# Helper functions imports
from .utils_project import get_secret, get_env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read SECRET_KEY from the Docker secret file
SECRET_KEY = get_secret('django_secretkey')

# Read DEBUG from environment variable
DEBUG = get_env('DEBUG', 'True') == 'True'

# Read USE_X_FORWARDED_HOST from environment variable
USE_X_FORWARDED_HOST = get_env('USE_X_FORWARDED_HOST', 'True') == 'True'

# Read ALLOWED_HOSTS from environment variable
ALLOWED_HOSTS = get_env('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')

# Read CSRF_TRUSTED_ORIGINS from environment variable
CSRF_TRUSTED_ORIGINS = get_env('CSRF_TRUSTED_ORIGINS', 'http://127.0.0.1:5000,http://localhost:5000').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # My Custom Apps
    'mainapp',

    # Required for extra postgresql functionality
    'django.contrib.postgres',

    # Required for Django core functionality
    'allauth',
    'allauth.account',

    # Additionally required for Django allauth usersessions functionality
    'django.contrib.humanize',
    'allauth.usersessions',

    # Apps related to Tasks(Celery)
    'django_celery_results', # For storing task results in Django DB
    'django_celery_beat', # For storing and managing periodic tasks in Django DB
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', # Required for Django i18n functionality. Not added by default
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Required for Django allauth core functionality
    'allauth.account.middleware.AccountMiddleware',

    # Required for Django allauth usersessions functionality
    'allauth.usersessions.middleware.UserSessionsMiddleware',
]

ROOT_URLCONF = 'kartflip.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Required for Django allauth core functionality
AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend', 
]

WSGI_APPLICATION = 'kartflip.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    # Note: A database entry with the name 'default' is always required by Django, even if its params are empty
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': get_secret('postgresql_db'),
        'USER': get_secret('postgresql_user'),
        'PASSWORD': get_secret('postgresql_password'),
        'HOST': get_env('DB_HOST', 'postgresql'),
        'PORT': get_env('DB_PORT', '5432'),
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# Url for static files
STATIC_URL = 'static/'

# Location in app directory where static files are collected when the `collectstatic` command is run
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Additional locations of static files (where collectstatic looks)
STATICFILES_DIRS = [
    BASE_DIR / 'staticfiles_source',
]

# Media files (public, user uploaded files like logos, etc)
# Url for media files
MEDIA_URL = 'media/'

# Location in app directory where media files are stored
MEDIA_ROOT = BASE_DIR / 'mediafiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django allauth core config
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_CHANGE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory' # Set to 'none' to disable email verification for testing
ACCOUNT_SIGNUP_FIELDS = {'username*', 'email*', 'password1*', 'password2*'} # email with asterisk is required
ACCOUNT_MAX_EMAIL_ADDRESSES = 2
ACCOUNT_USERNAME_MIN_LENGTH = 6
ACCOUNT_PRESERVE_USERNAME_CASING = False

# Django allauth usersessions config
USERSESSIONS_TRACK_ACTIVITY = True

# Celery Broker Settings (Redis)
REDIS_TASKS_PASSWORD = get_secret('redis_tasks_password')
TASKS_REDIS_HOST = get_env("TASKS_REDIS_HOST", "redis_tasks")
TASKS_REDIS_PORT = get_env("TASKS_REDIS_PORT", 6379)

if REDIS_TASKS_PASSWORD:
    CELERY_BROKER_URL = f"redis://:{REDIS_TASKS_PASSWORD}@{TASKS_REDIS_HOST}:{TASKS_REDIS_PORT}/1"
else:
    # This will raise an error to prevent connecting to Redis without a password
    raise RuntimeError("REDIS_TASKS_PASSWORD is required for Celery broker. Refusing to connect to Redis without a password.")


# General Celery settings
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE # Uses the TIME_ZONE variable defined above
CELERY_TASK_TRACK_STARTED = True # Track task start times

# Celery Result settings 
CELERY_RESULT_BACKEND = 'django-db' # Set which ORM to use here
CELERY_RESULT_SERIALIZER = 'json' # Set which serializer to use for results
CELERY_RESULT_EXTENDED = True # Set this to TRUE for storing extra metadata
CELERY_RESULT_EXPIRES = None # Keep results indefinitely for audit purposes