# Multi-stage build for Celery Worker container
# Stage 1: Build stage
FROM python:3.13-slim-bookworm AS builder

# Change directory to '/app'. Also creates the directory if it doesn't exist
WORKDIR /app

# Copy requirements and install dependencies
COPY _containers/tasks/requirements_tasks.txt /app/requirements_tasks.txt

# Upgrade pip first
RUN pip install --upgrade pip

# Now install the dependencies listed in the requirements file
# Use --no-cache-dir to avoid caching the packages in the image
RUN pip install --no-cache-dir -r requirements_tasks.txt

# Stage 2: Runtime stage
FROM python:3.13-slim-bookworm

# Change directory to '/app'. Also creates the directory if it doesn't exist
WORKDIR /app

# REMOVE THESE TWO IN PRODUCTION
# Set environment variables to optimize Python
# Prevents Python from writing pyc files to disk
ENV PYTHONDONTWRITEBYTECODE=1

# Prevents Python from buffering stdout and stderr
# This is useful for seeing logs in real-time when running in a container
ENV PYTHONUNBUFFERED=1

# Copy only necessary files from the builder stage
COPY --from=builder /usr/local/lib/python3.13/site-packages /usr/local/lib/python3.13/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Create a non-privileged user
RUN adduser --system tasksuser

# Note: We are doing chown twice, so non-privileged user remains the owner
# Copy the application code first
COPY --chown=tasksuser ./app /app/

# Copy the entrypoint script to a location that is not overwritten by a volume mount.
COPY --chown=tasksuser _containers/tasks/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Switch to the non-privileged user
USER tasksuser

# Note: We are using 'entrypoint' script because two CMD commands are not allowed in Dockerfile
# Run the entrypoint script
CMD ["/usr/local/bin/entrypoint.sh"]

